Compiling...
TraderSpi.cpp: In member function â€˜virtual void CTraderSpi::OnRtnInvestorAccountDeposit(CUstpFtdcInvestorAccountDepositResField*)â€™:
TraderSpi.cpp:602:58: warning: format â€˜%sâ€™ expects argument of type â€˜char*â€™, but argument 2 has type â€˜TUstpFtdcMoneyType {aka double}â€™ [-Wformat=]
  printf("½ð¶î£½[%s]\n",pInvestorAccountDepositRes->Amount);
                                                          ^
TraderSpi.cpp:603:73: warning: format â€˜%sâ€™ expects argument of type â€˜char*â€™, but argument 2 has type â€˜intâ€™ [-Wformat=]
  printf("³öÈë½ð·½Ïò£½[%s]\n",pInvestorAccountDepositRes->AmountDirection);
                                                                         ^
TraderSpi.cpp:604:65: warning: format â€˜%sâ€™ expects argument of type â€˜char*â€™, but argument 2 has type â€˜TUstpFtdcMoneyType {aka double}â€™ [-Wformat=]
  printf("¿ÉÓÃ×Ê½ð£½[%s]\n",pInvestorAccountDepositRes->Available);
                                                                 ^
TraderSpi.cpp:605:65: warning: format â€˜%sâ€™ expects argument of type â€˜char*â€™, but argument 2 has type â€˜TUstpFtdcMoneyType {aka double}â€™ [-Wformat=]
  printf("½áËã×¼±¸½ð£½[%s]\n",pInvestorAccountDepositRes->Balance);
                                                                 ^
PublicFuncs.cpp:30:19: warning: deprecated conversion from string constant to â€˜char*â€™ [-Wwrite-strings]
 char* g_pFlowPath="./flow/";
                   ^
PublicFuncs.cpp:31:22: warning: deprecated conversion from string constant to â€˜char*â€™ [-Wwrite-strings]
 char* g_pProductInfo="ÑÝÊ¾²âÊÔ¹¤¾ßV1.0";
                      ^
PublicFuncs.cpp:32:22: warning: deprecated conversion from string constant to â€˜char*â€™ [-Wwrite-strings]
 char* g_pProgramName="TestApi";
                      ^
PublicFuncs.cpp: In function â€˜bool StartAutoOrder()â€™:
PublicFuncs.cpp:481:16: warning: unused variable â€˜dwIDThreadâ€™ [-Wunused-variable]
  unsigned long dwIDThread;
                ^
PublicFuncs.cpp: In function â€˜void ShowManu()â€™:
PublicFuncs.cpp:76:23: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%d",&g_choose);
                       ^
PublicFuncs.cpp: In function â€˜void StartInputOrder()â€™:
PublicFuncs.cpp:94:30: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(ord.InvestorID));
                              ^
PublicFuncs.cpp:98:32: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(ord.InstrumentID));
                                ^
PublicFuncs.cpp:102:35: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%c",&(ord.OrderPriceType));
                                   ^
PublicFuncs.cpp:106:30: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%c",&(ord.Direction));
                              ^
PublicFuncs.cpp:110:31: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%c",&(ord.OffsetFlag));
                               ^
PublicFuncs.cpp:114:30: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%c",&(ord.HedgeFlag));
                              ^
PublicFuncs.cpp:118:32: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%lf",&(ord.LimitPrice));
                                ^
PublicFuncs.cpp:122:27: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%d",&(ord.Volume));
                           ^
PublicFuncs.cpp:126:34: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%c",&(ord.TimeCondition));
                                  ^
PublicFuncs.cpp: In function â€˜void StartOrderAction()â€™:
PublicFuncs.cpp:162:38: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(OrderAction.InvestorID));
                                      ^
PublicFuncs.cpp:166:20: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%d",&SysID);
                    ^
PublicFuncs.cpp: In function â€˜void StartQryInvestorPosition()â€™:
PublicFuncs.cpp:342:46: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(QryInvestorPosition.InvestorID));
                                              ^
PublicFuncs.cpp: In function â€˜void StartUpdatePassword()â€™:
PublicFuncs.cpp:360:39: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(PasswordUpd.OldPassword));
                                       ^
PublicFuncs.cpp:362:39: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(PasswordUpd.NewPassword));
                                       ^
PublicFuncs.cpp: In function â€˜void StartQueryComplianceParam()â€™:
PublicFuncs.cpp:405:42: warning: ignoring return value of â€˜int scanf(const char*, ...)â€™, declared with attribute warn_unused_result [-Wunused-result]
  scanf("%s",(ComplianceParam.InvestorID));
                                          ^
